Style/SymbolArray:
  Enabled: true

# kind_of? is a good way to check a type
Style/ClassCheck:
  EnforcedStyle: kind_of?

Style/TernaryParentheses:
  Enabled: true
  EnforcedStyle: require_parentheses_when_complex

# specs sometimes have useless assignments, which is fine
Lint/UselessAssignment:
  Exclude:
    - '**/spec/**/*'

# We could potentially enable the 2 below:
Layout/FirstHashElementIndentation:
  Enabled: false

Layout/HashAlignment:
  Enabled: false

# HoundCI doesn't like this rule
Layout/DotPosition:
  Enabled: false

# We allow !! as it's an easy way to convert ot boolean
Style/DoubleNegation:
  Enabled: false
  
Style/NumericPredicate:
  Enabled: false

# Sometimes we allow a rescue block that doesn't contain code
Lint/SuppressedException:
  Enabled: false

Style/RescueStandardError:
  Enabled: false

# Cop supports --auto-correct.
Lint/UnusedBlockArgument:
  Enabled: false

# Needed for $verbose
Style/GlobalVars:
  Enabled: false

# We want to allow class Fastlane::Class
Style/ClassAndModuleChildren:
  Enabled: false

# $? Exit
Style/SpecialGlobalVars:
  Enabled: false

Metrics/AbcSize:
  Enabled: false

Metrics/MethodLength:
  Enabled: false
  
Metrics/ModuleLength:
  Enabled: true
  Max: 110

Metrics/CyclomaticComplexity:
  Enabled: false

Metrics/BlockNesting:
  Max: 5

Metrics/BlockLength:
  Enabled: false

# The %w might be confusing for new users
Style/WordArray:
  MinSize: 19

# raise and fail are both okay
Style/SignalException:
  Enabled: false

# Better too much 'return' than one missing
Style/RedundantReturn:
  Enabled: false

# Having if in the same line might not always be good
Style/IfUnlessModifier:
  Enabled: false

# and and or is okay
Style/AndOr:
  Enabled: false

# Configuration parameters: CountComments.
Metrics/ClassLength:
  Max: 400

# Configuration parameters: AllowURI, URISchemes.
Metrics/LineLength:
  Enabled: false
  Max: 370

# Configuration parameters: CountKeywordArgs.
Metrics/ParameterLists:
  Max: 17

Metrics/PerceivedComplexity:
  Max: 25

# Sometimes it's easier to read without guards
Style/GuardClause:
  Enabled: false

# We allow both " and '
Style/StringLiterals:
  Enabled: false

# something = if something_else
# that's confusing
Style/ConditionalAssignment:
  Enabled: false

# Better to have too much self than missing a self
Style/RedundantSelf:
  Enabled: false

# e.g.
# def self.is_supported?(platform)
# we may never use `platform`
Lint/UnusedMethodArgument:
  Enabled: false

# the let(:key) { ... }
Lint/ParenthesesAsGroupedExpression:
  Exclude:
    - '**/spec/**/*'

# This would reject is_ in front of methods
# We use `is_supported?` everywhere already
Naming/PredicateName:
  Enabled: false

# We allow the $
Style/PerlBackrefs:
  Enabled: false

# Disable '+ should be surrounded with a single space' for xcodebuild_spec.rb
Layout/SpaceAroundOperators:
  Exclude:
    - '**/spec/actions_specs/xcodebuild_spec.rb'

# We're not there yet
Style/Documentation:
  Enabled: false

# Added after upgrade to 0.38.0
Style/MutableConstant:
  Enabled: false

# length > 0 is good
Style/ZeroLengthPredicate:
  Enabled: false

# Adds complexity
Style/IfInsideElse:
  Enabled: false

Style/RescueModifier:
  Enabled: false

Naming/VariableNumber:
  Enabled: false

Style/ClassVars:
  Enabled: false

Style/FrozenStringLiteralComment:
  Enabled: false

Style/MultilineBlockChain:
  Enabled: false

AllCops:
  TargetRubyVersion: 2.6
  NewCops: enable
  Exclude:
    - './tmp/**/*'
    - './Gemfile'
